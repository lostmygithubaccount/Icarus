[
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory data analysis (EDA)",
    "section": "",
    "text": "Exploratory data analysis (EDA)\nUse this notebook to explore and visualize the data.\n\nimport os\nimport ibis\nimport ibis.selectors as s\n\nimport plotly.express as px\n\nfrom icarus.config import (\n    DATA_DIR,\n    RAW_DATA_DIR,\n    BUY_SELL_TABLE,\n    SOCIAL_MEDIA_TABLE,\n)\nfrom icarus.catalog import Catalog\nfrom icarus.synthetic_data.investments import fake, seed_table\n\npx.defaults.template = \"plotly_dark\"\nibis.options.interactive = True\n\n\nf\"{10_000_000_000 / (60 * 60 * 24):,.2f}\"\n\n'115,740.74'\n\n\n\nlookback = ibis.interval(days=1)\nstep = ibis.interval(seconds=1)\n\n\nt = (\n    ibis.range(ibis.now() - lookback, ibis.now(), step=step)\n    .unnest()\n    .name(\"timestamp\")\n    .as_table()\n    .mutate(\n        index=(ibis.row_number().over(order_by=\"timestamp\")),\n        symbol=ibis.random(),\n        bid=ibis.random(),\n        bid_size=ibis.random(),\n        ask=ibis.random(),\n        ask_size=ibis.random(),\n        **{c: 2 * (ibis.random() - 0.5) for c in [\"a\", \"b\", \"c\"]},\n        **{\n            c: ibis.null(type=str)\n            for c in list(map(chr, range(ord(\"d\"), ord(\"z\") + 1)))\n        },\n    )\n    .relocate(\"index\", \"timestamp\")\n)\nt\n\n┏━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┓\n┃ index ┃ timestamp               ┃ symbol   ┃ bid      ┃ bid_size ┃ ask      ┃ ask_size ┃ a         ┃ b         ┃ c         ┃ d      ┃ e      ┃ f      ┃ g      ┃ h      ┃ i      ┃ j      ┃ k      ┃ l      ┃ m      ┃ n      ┃ o      ┃ p      ┃ q      ┃ r      ┃ s      ┃ t      ┃ u      ┃ v      ┃ w      ┃ x      ┃ y      ┃ z      ┃\n┡━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━┩\n│ int64 │ timestamp               │ float64  │ float64  │ float64  │ float64  │ float64  │ float64   │ float64   │ float64   │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │\n├───────┼─────────────────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼───────────┼───────────┼───────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┤\n│     0 │ 2024-08-24 19:37:00.819 │ 0.371553 │ 0.306135 │ 0.311198 │ 0.405784 │ 0.456053 │ -0.801345 │  0.438332 │  0.516806 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     1 │ 2024-08-24 19:37:01.819 │ 0.787114 │ 0.790495 │ 0.445902 │ 0.658289 │ 0.159520 │  0.087849 │  0.244784 │  0.819750 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     2 │ 2024-08-24 19:37:02.819 │ 0.019387 │ 0.060737 │ 0.780957 │ 0.060797 │ 0.679710 │  0.142616 │  0.791878 │  0.638659 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     3 │ 2024-08-24 19:37:03.819 │ 0.997513 │ 0.813810 │ 0.320053 │ 0.469694 │ 0.886834 │  0.492384 │ -0.374592 │  0.361262 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     4 │ 2024-08-24 19:37:04.819 │ 0.259937 │ 0.494654 │ 0.844030 │ 0.504984 │ 0.704192 │  0.749538 │ -0.638469 │  0.436496 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     5 │ 2024-08-24 19:37:05.819 │ 0.322916 │ 0.475300 │ 0.134560 │ 0.642419 │ 0.332498 │ -0.124538 │  0.005306 │ -0.769956 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     6 │ 2024-08-24 19:37:06.819 │ 0.398705 │ 0.771843 │ 0.697587 │ 0.994515 │ 0.516881 │ -0.716842 │  0.641905 │  0.131817 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     7 │ 2024-08-24 19:37:07.819 │ 0.820137 │ 0.642874 │ 0.957901 │ 0.844053 │ 0.473459 │ -0.514814 │  0.285272 │  0.376016 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     8 │ 2024-08-24 19:37:08.819 │ 0.036390 │ 0.189396 │ 0.044299 │ 0.782919 │ 0.636982 │  0.475307 │ -0.336370 │  0.605758 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     9 │ 2024-08-24 19:37:09.819 │ 0.476871 │ 0.165828 │ 0.557456 │ 0.073385 │ 0.848041 │ -0.165663 │ -0.502586 │  0.793638 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     … │ …                       │        … │        … │        … │        … │        … │         … │         … │         … │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │\n└───────┴─────────────────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴───────────┴───────────┴───────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┘\n\n\n\n\nimport random\n\nsymbols = [chr(i) for i in range(ord(\"A\"), ord(\"Z\") + 1)]\nsymbols = [\n    f\"{a}{b}{c}{d}\" for a in symbols for b in symbols for c in symbols for d in symbols\n]\nsymbols = random.sample(symbols, 500)\nsymbols[:5]\n\n['FHWQ', 'TJBC', 'GAWY', 'UYQF', 'YANB']\n\n\n\nsymbols_case = ibis.case()\nfor i, symbol in enumerate(symbols):\n    symbols_case = symbols_case.when(\n        (i / len(symbols) &lt; ibis._[\"symbol\"])\n        & (ibis._[\"symbol\"] &lt; ((i + 1) / len(symbols))),\n        symbol,\n    )\nsymbols_case = symbols_case.else_(ibis.null()).end()\n\n\nt = t.mutate(\n    symbol=symbols_case,\n    bid_size=(ibis._[\"bid_size\"] * 1000).cast(\"int64\"),\n    ask_size=(ibis._[\"ask_size\"] * 1000).cast(\"int64\"),\n)\nt\n\n┏━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┓\n┃ index ┃ timestamp               ┃ symbol ┃ bid      ┃ bid_size ┃ ask      ┃ ask_size ┃ a         ┃ b         ┃ c         ┃ d      ┃ e      ┃ f      ┃ g      ┃ h      ┃ i      ┃ j      ┃ k      ┃ l      ┃ m      ┃ n      ┃ o      ┃ p      ┃ q      ┃ r      ┃ s      ┃ t      ┃ u      ┃ v      ┃ w      ┃ x      ┃ y      ┃ z      ┃\n┡━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━┩\n│ int64 │ timestamp               │ string │ float64  │ int64    │ float64  │ int64    │ float64   │ float64   │ float64   │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │\n├───────┼─────────────────────────┼────────┼──────────┼──────────┼──────────┼──────────┼───────────┼───────────┼───────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┤\n│     0 │ 2024-08-24 19:37:02.270 │ XUKN   │ 0.327329 │      240 │ 0.793221 │      606 │ -0.816453 │ -0.990133 │  0.109555 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     1 │ 2024-08-24 19:37:03.270 │ DUQX   │ 0.261553 │      762 │ 0.898571 │      187 │ -0.329526 │  0.905741 │ -0.683908 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     2 │ 2024-08-24 19:37:04.270 │ IUJO   │ 0.481183 │      491 │ 0.311750 │       12 │  0.233892 │ -0.899210 │ -0.000739 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     3 │ 2024-08-24 19:37:05.270 │ AAAI   │ 0.614020 │      975 │ 0.530599 │      194 │  0.655478 │  0.158591 │ -0.345041 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     4 │ 2024-08-24 19:37:06.270 │ MDHO   │ 0.842702 │      873 │ 0.751816 │      635 │ -0.790380 │ -0.912348 │ -0.706770 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     5 │ 2024-08-24 19:37:07.270 │ TJYL   │ 0.601843 │      528 │ 0.086534 │      849 │  0.413490 │ -0.659720 │ -0.892621 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     6 │ 2024-08-24 19:37:08.270 │ XLZJ   │ 0.146988 │      583 │ 0.868428 │      946 │ -0.185097 │ -0.845018 │ -0.492903 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     7 │ 2024-08-24 19:37:09.270 │ IYCA   │ 0.337818 │      867 │ 0.240491 │      567 │  0.185370 │  0.319300 │ -0.044587 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     8 │ 2024-08-24 19:37:10.270 │ VBZG   │ 0.575153 │      741 │ 0.584079 │      538 │ -0.917906 │  0.290942 │ -0.296879 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     9 │ 2024-08-24 19:37:11.270 │ ORCT   │ 0.699021 │       82 │ 0.162669 │      811 │  0.555662 │ -0.785786 │ -0.104836 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     … │ …                       │ …      │        … │        … │        … │        … │         … │         … │         … │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │\n└───────┴─────────────────────────┴────────┴──────────┴──────────┴──────────┴──────────┴───────────┴───────────┴───────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┘\n\n\n\n\nt\n\n┏━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┓\n┃ index ┃ timestamp               ┃ symbol ┃ bid      ┃ bid_size ┃ ask      ┃ ask_size ┃ a         ┃ b         ┃ c         ┃ d      ┃ e      ┃ f      ┃ g      ┃ h      ┃ i      ┃ j      ┃ k      ┃ l      ┃ m      ┃ n      ┃ o      ┃ p      ┃ q      ┃ r      ┃ s      ┃ t      ┃ u      ┃ v      ┃ w      ┃ x      ┃ y      ┃ z      ┃\n┡━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━┩\n│ int64 │ timestamp               │ string │ float64  │ int64    │ float64  │ int64    │ float64   │ float64   │ float64   │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │ string │\n├───────┼─────────────────────────┼────────┼──────────┼──────────┼──────────┼──────────┼───────────┼───────────┼───────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┤\n│     0 │ 2024-08-24 19:37:02.918 │ IKLJ   │ 0.442881 │      873 │ 0.534014 │      149 │  0.684507 │  0.834366 │ -0.673739 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     1 │ 2024-08-24 19:37:03.918 │ AXFD   │ 0.856662 │       23 │ 0.211962 │       47 │ -0.163827 │  0.004483 │  0.140096 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     2 │ 2024-08-24 19:37:04.918 │ PANJ   │ 0.015340 │      352 │ 0.998910 │      610 │  0.202228 │ -0.221155 │ -0.109774 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     3 │ 2024-08-24 19:37:05.918 │ DEFP   │ 0.623630 │      873 │ 0.319139 │       19 │  0.622155 │  0.369630 │ -0.578841 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     4 │ 2024-08-24 19:37:06.918 │ VZUT   │ 0.982768 │      933 │ 0.994429 │      296 │  0.734781 │  0.519647 │  0.493695 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     5 │ 2024-08-24 19:37:07.918 │ JWCJ   │ 0.238419 │      183 │ 0.958357 │      441 │  0.573870 │  0.360261 │ -0.742923 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     6 │ 2024-08-24 19:37:08.918 │ IHLU   │ 0.920991 │        6 │ 0.587380 │       66 │ -0.427803 │  0.370385 │  0.993200 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     7 │ 2024-08-24 19:37:09.918 │ CSVK   │ 0.776877 │      127 │ 0.818760 │      333 │ -0.561424 │ -0.813563 │ -0.442053 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     8 │ 2024-08-24 19:37:10.918 │ UNMW   │ 0.285459 │      977 │ 0.207574 │      243 │  0.142452 │ -0.068614 │  0.093360 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     9 │ 2024-08-24 19:37:11.918 │ ODWL   │ 0.197301 │      726 │ 0.512588 │      814 │  0.763387 │ -0.285511 │  0.142065 │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │ NULL   │\n│     … │ …                       │ …      │        … │        … │        … │        … │         … │         … │         … │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │ …      │\n└───────┴─────────────────────────┴────────┴──────────┴──────────┴──────────┴──────────┴───────────┴───────────┴───────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┘\n\n\n\n\nseed_table\n\n┏━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━┓\n┃ ticker ┃ sector  ┃ name                                     ┃ base_price ┃ shares_total ┃ trend  ┃\n┡━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━┩\n│ string │ string  │ string                                   │ float64    │ int64        │ string │\n├────────┼─────────┼──────────────────────────────────────────┼────────────┼──────────────┼────────┤\n│ AAI    │ tech    │ Athena's AI                              │      100.0 │     10000000 │ down   │\n│ SUBS   │ tech    │ SubWay Cloud                             │      150.0 │    100000000 │ up     │\n│ II     │ tech    │ Icarus Investments                       │     3000.0 │       500000 │ flat   │\n│ IBIS   │ service │ Interior Basics In Season                │     1000.0 │      1000000 │ down   │\n│ VODA   │ service │ Voyage's Offices, Doors, and Accessories │     2500.0 │      1000000 │ up     │\n└────────┴─────────┴──────────────────────────────────────────┴────────────┴──────────────┴────────┘\n\n\n\n\ncatalog = Catalog()\ncatalog.list_tables()\n\n[]\n\n\n\nseed_table\n\n┏━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━┳━━━━━━━━┓\n┃ ticker ┃ sector  ┃ name                                     ┃ base_price ┃ shares_total ┃ trend  ┃\n┡━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━╇━━━━━━━━┩\n│ string │ string  │ string                                   │ float64    │ int64        │ string │\n├────────┼─────────┼──────────────────────────────────────────┼────────────┼──────────────┼────────┤\n│ AAI    │ tech    │ Athena's AI                              │      100.0 │     10000000 │ down   │\n│ SUBS   │ tech    │ SubWay Cloud                             │      150.0 │    100000000 │ up     │\n│ II     │ tech    │ Icarus Investments                       │     3000.0 │       500000 │ flat   │\n│ IBIS   │ service │ Interior Basics In Season                │     1000.0 │      1000000 │ down   │\n│ VODA   │ service │ Voyage's Offices, Doors, and Accessories │     2500.0 │      1000000 │ up     │\n└────────┴─────────┴──────────────────────────────────────────┴────────────┴──────────────┴────────┘\n\n\n\n\ndata_glob = os.path.join(DATA_DIR, RAW_DATA_DIR, BUY_SELL_TABLE, \"*.parquet\")\nbs = ibis.read_parquet(data_glob)\nbs\n\n\n---------------------------------------------------------------------------\nIOException                               Traceback (most recent call last)\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:857, in Backend.read_parquet(self, source_list, table_name, **kwargs)\n    856 try:\n--&gt; 857     self._read_parquet_duckdb_native(source_list, table_name, **kwargs)\n    858 except duckdb.IOException:\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:875, in Backend._read_parquet_duckdb_native(self, source_list, table_name, **kwargs)\n    872 options = [\n    873     sg.to_identifier(key).eq(sge.convert(val)) for key, val in kwargs.items()\n    874 ]\n--&gt; 875 self._create_temp_view(\n    876     table_name,\n    877     sg.select(STAR).from_(self.compiler.f.read_parquet(source_list, *options)),\n    878 )\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:1649, in Backend._create_temp_view(self, table_name, source)\n   1648 def _create_temp_view(self, table_name, source):\n-&gt; 1649     with self._safe_raw_sql(self._get_temp_view_definition(table_name, source)):\n   1650         pass\n\nFile /opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/contextlib.py:137, in _GeneratorContextManager.__enter__(self)\n    136 try:\n--&gt; 137     return next(self.gen)\n    138 except StopIteration:\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:338, in Backend._safe_raw_sql(self, *args, **kwargs)\n    336 @contextlib.contextmanager\n    337 def _safe_raw_sql(self, *args, **kwargs):\n--&gt; 338     yield self.raw_sql(*args, **kwargs)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:94, in Backend.raw_sql(self, query, **kwargs)\n     93     query = query.sql(dialect=self.name)\n---&gt; 94 return self.con.execute(query, **kwargs)\n\nIOException: IO Error: No files found that match the pattern \"/home/runner/work/Icarus/Icarus/website/datalake/_raw/buy_sell/*.parquet\"\n\nDuring handling of the above exception, another exception occurred:\n\nFileNotFoundError                         Traceback (most recent call last)\nCell In[12], line 2\n      1 data_glob = os.path.join(DATA_DIR, RAW_DATA_DIR, BUY_SELL_TABLE, \"*.parquet\")\n----&gt; 2 bs = ibis.read_parquet(data_glob)\n      3 bs\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/expr/api.py:1551, in read_parquet(sources, table_name, **kwargs)\n   1548 from ibis.config import _default_backend\n   1550 con = _default_backend()\n-&gt; 1551 return con.read_parquet(sources, table_name=table_name, **kwargs)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:859, in Backend.read_parquet(self, source_list, table_name, **kwargs)\n    857     self._read_parquet_duckdb_native(source_list, table_name, **kwargs)\n    858 except duckdb.IOException:\n--&gt; 859     self._read_parquet_pyarrow_dataset(source_list, table_name, **kwargs)\n    861 return self.table(table_name)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:885, in Backend._read_parquet_pyarrow_dataset(self, source_list, table_name, **kwargs)\n    880 def _read_parquet_pyarrow_dataset(\n    881     self, source_list: str | Iterable[str], table_name: str, **kwargs: Any\n    882 ) -&gt; None:\n    883     import pyarrow.dataset as ds\n--&gt; 885     dataset = ds.dataset(list(map(ds.dataset, source_list)), **kwargs)\n    886     self._load_extensions([\"httpfs\"])\n    887     # We don't create a view since DuckDB special cases Arrow Datasets\n    888     # so if we also create a view we end up with both a \"lazy table\"\n    889     # and a view with the same name\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/pyarrow/dataset.py:794, in dataset(source, schema, format, filesystem, partitioning, partition_base_dir, exclude_invalid_files, ignore_prefixes)\n    783 kwargs = dict(\n    784     schema=schema,\n    785     filesystem=filesystem,\n   (...)\n    790     selector_ignore_prefixes=ignore_prefixes\n    791 )\n    793 if _is_path_like(source):\n--&gt; 794     return _filesystem_dataset(source, **kwargs)\n    795 elif isinstance(source, (tuple, list)):\n    796     if all(_is_path_like(elem) or isinstance(elem, FileInfo) for elem in source):\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/pyarrow/dataset.py:476, in _filesystem_dataset(source, schema, filesystem, partitioning, format, partition_base_dir, exclude_invalid_files, selector_ignore_prefixes)\n    474         fs, paths_or_selector = _ensure_multiple_sources(source, filesystem)\n    475 else:\n--&gt; 476     fs, paths_or_selector = _ensure_single_source(source, filesystem)\n    478 options = FileSystemFactoryOptions(\n    479     partitioning=partitioning,\n    480     partition_base_dir=partition_base_dir,\n    481     exclude_invalid_files=exclude_invalid_files,\n    482     selector_ignore_prefixes=selector_ignore_prefixes\n    483 )\n    484 factory = FileSystemDatasetFactory(fs, paths_or_selector, format, options)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/pyarrow/dataset.py:441, in _ensure_single_source(path, filesystem)\n    439     paths_or_selector = [path]\n    440 else:\n--&gt; 441     raise FileNotFoundError(path)\n    443 return filesystem, paths_or_selector\n\nFileNotFoundError: /home/runner/work/Icarus/Icarus/website/datalake/_raw/buy_sell/*.parquet\n\n\n\n\nbs = catalog.table(\"buy_sell\")\nbs\n\n\n---------------------------------------------------------------------------\nTableNotFoundError                        Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 bs = catalog.table(\"buy_sell\")\n      2 bs\n\nFile ~/work/Icarus/Icarus/src/icarus/catalog.py:65, in Catalog.table(self, table_name)\n     64 def table(self, table_name):\n---&gt; 65     return read_table(table_name)\n\nFile ~/work/Icarus/Icarus/src/icarus/catalog.py:31, in read_table(table_name)\n     28 else:\n     29     table_path = delta_table_path(table_name)\n---&gt; 31 return ibis.read_delta(table_path)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/expr/api.py:1602, in read_delta(source, table_name, **kwargs)\n   1599 from ibis.config import _default_backend\n   1601 con = _default_backend()\n-&gt; 1602 return con.read_delta(source, table_name=table_name, **kwargs)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:971, in Backend.read_delta(self, source_table, table_name, **kwargs)\n    964 except ImportError:\n    965     raise ImportError(\n    966         \"The deltalake extra is required to use the \"\n    967         \"read_delta method. You can install it using pip:\\n\\n\"\n    968         \"pip install 'ibis-framework[deltalake]'\\n\"\n    969     )\n--&gt; 971 delta_table = DeltaTable(source_table, **kwargs)\n    973 self.con.register(table_name, delta_table.to_pyarrow_dataset())\n    974 return self.table(table_name)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/deltalake/table.py:380, in DeltaTable.__init__(self, table_uri, version, storage_options, without_files, log_buffer_size)\n    360 \"\"\"\n    361 Create the Delta Table from a path with an optional version.\n    362 Multiple StorageBackends are currently supported: AWS S3, Azure Data Lake Storage Gen2, Google Cloud Storage (GCS) and local URI.\n   (...)\n    377 \n    378 \"\"\"\n    379 self._storage_options = storage_options\n--&gt; 380 self._table = RawDeltaTable(\n    381     str(table_uri),\n    382     version=version,\n    383     storage_options=storage_options,\n    384     without_files=without_files,\n    385     log_buffer_size=log_buffer_size,\n    386 )\n\nTableNotFoundError: no log files\n\n\n\n\nt = bs.group_by(\"ticker\").agg(count=ibis._.count()).order_by(ibis.desc(\"count\"))\nt\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 t = bs.group_by(\"ticker\").agg(count=ibis._.count()).order_by(ibis.desc(\"count\"))\n      2 t\n\nNameError: name 'bs' is not defined\n\n\n\n\npx.bar(\n    t,\n    x=\"ticker\",\n    y=\"count\",\n    title=\"Number of trades per symbol\",\n    color=\"ticker\",\n)\n\n\n---------------------------------------------------------------------------\nIbisTypeError                             Traceback (most recent call last)\nCell In[15], line 1\n----&gt; 1 px.bar(\n      2     t,\n      3     x=\"ticker\",\n      4     y=\"count\",\n      5     title=\"Number of trades per symbol\",\n      6     color=\"ticker\",\n      7 )\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/plotly/express/_chart_types.py:373, in bar(data_frame, x, y, color, pattern_shape, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, hover_name, hover_data, custom_data, text, base, error_x, error_x_minus, error_y, error_y_minus, animation_frame, animation_group, category_orders, labels, color_discrete_sequence, color_discrete_map, color_continuous_scale, pattern_shape_sequence, pattern_shape_map, range_color, color_continuous_midpoint, opacity, orientation, barmode, log_x, log_y, range_x, range_y, text_auto, title, template, width, height)\n    325 def bar(\n    326     data_frame=None,\n    327     x=None,\n   (...)\n    367     height=None,\n    368 ) -&gt; go.Figure:\n    369     \"\"\"\n    370     In a bar plot, each row of `data_frame` is represented as a rectangular\n    371     mark.\n    372     \"\"\"\n--&gt; 373     return make_figure(\n    374         args=locals(),\n    375         constructor=go.Bar,\n    376         trace_patch=dict(textposition=\"auto\"),\n    377         layout_patch=dict(barmode=barmode),\n    378     )\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/plotly/express/_core.py:2090, in make_figure(args, constructor, trace_patch, layout_patch)\n   2087 layout_patch = layout_patch or {}\n   2088 apply_default_cascade(args)\n-&gt; 2090 args = build_dataframe(args, constructor)\n   2091 if constructor in [go.Treemap, go.Sunburst, go.Icicle] and args[\"path\"] is not None:\n   2092     args = process_dataframe_hierarchy(args)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/plotly/express/_core.py:1437, in build_dataframe(args, constructor)\n   1434                 necessary_columns.update(i for i in args[field] if i in columns)\n   1435         columns = list(necessary_columns)\n   1436         args[\"data_frame\"] = pd.api.interchange.from_dataframe(\n-&gt; 1437             args[\"data_frame\"].select_columns_by_name(columns)\n   1438         )\n   1439 except (ImportError, NotImplementedError) as exc:\n   1440     # temporary workaround; developers of third-party libraries themselves\n   1441     # should try a different implementation, if available. For example:\n   1442     # def __dataframe__(self, ...):\n   1443     #   if not some_condition:\n   1444     #     self.to_pandas(...)\n   1445     if hasattr(df_not_pandas, \"toPandas\"):\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/expr/types/dataframe_interchange.py:89, in IbisDataFrame.select_columns_by_name(self, names)\n     87 def select_columns_by_name(self, names: Sequence[str]) -&gt; IbisDataFrame:\n     88     names = list(names)\n---&gt; 89     table = self._table.select(names)\n     90     if (pyarrow_table := self._pyarrow_table) is not None:\n     91         pyarrow_table = pyarrow_table.select(names)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/expr/types/relations.py:2203, in Table.select(self, *exprs, **named_exprs)\n   2201 values = unwrap_aliases(values)\n   2202 if not values:\n-&gt; 2203     raise com.IbisTypeError(\n   2204         \"You must select at least one column for a valid projection\"\n   2205     )\n   2207 # we need to detect reductions which are either turned into window functions\n   2208 # or scalar subqueries depending on whether they are originating from self\n   2209 values = {\n   2210     k: rewrite_project_input(v, relation=self.op()) for k, v in values.items()\n   2211 }\n\nIbisTypeError: You must select at least one column for a valid projection\n\n\n\n\nbs.count()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[16], line 1\n----&gt; 1 bs.count()\n\nNameError: name 'bs' is not defined\n\n\n\n\nbs[\"location\"].value_counts()\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[17], line 1\n----&gt; 1 bs[\"location\"].value_counts()\n\nNameError: name 'bs' is not defined\n\n\n\n\nf\"{bs.count().to_pyarrow().as_py():,}\"\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[18], line 1\n----&gt; 1 f\"{bs.count().to_pyarrow().as_py():,}\"\n\nNameError: name 'bs' is not defined\n\n\n\n\ndata_glob = os.path.join(DATA_DIR, RAW_DATA_DIR, SOCIAL_MEDIA_TABLE, \"*.parquet\")\nsm = ibis.read_parquet(data_glob)\nsm\n\n\n---------------------------------------------------------------------------\nIOException                               Traceback (most recent call last)\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:857, in Backend.read_parquet(self, source_list, table_name, **kwargs)\n    856 try:\n--&gt; 857     self._read_parquet_duckdb_native(source_list, table_name, **kwargs)\n    858 except duckdb.IOException:\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:875, in Backend._read_parquet_duckdb_native(self, source_list, table_name, **kwargs)\n    872 options = [\n    873     sg.to_identifier(key).eq(sge.convert(val)) for key, val in kwargs.items()\n    874 ]\n--&gt; 875 self._create_temp_view(\n    876     table_name,\n    877     sg.select(STAR).from_(self.compiler.f.read_parquet(source_list, *options)),\n    878 )\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:1649, in Backend._create_temp_view(self, table_name, source)\n   1648 def _create_temp_view(self, table_name, source):\n-&gt; 1649     with self._safe_raw_sql(self._get_temp_view_definition(table_name, source)):\n   1650         pass\n\nFile /opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/contextlib.py:137, in _GeneratorContextManager.__enter__(self)\n    136 try:\n--&gt; 137     return next(self.gen)\n    138 except StopIteration:\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:338, in Backend._safe_raw_sql(self, *args, **kwargs)\n    336 @contextlib.contextmanager\n    337 def _safe_raw_sql(self, *args, **kwargs):\n--&gt; 338     yield self.raw_sql(*args, **kwargs)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:94, in Backend.raw_sql(self, query, **kwargs)\n     93     query = query.sql(dialect=self.name)\n---&gt; 94 return self.con.execute(query, **kwargs)\n\nIOException: IO Error: No files found that match the pattern \"/home/runner/work/Icarus/Icarus/website/datalake/_raw/social_media/*.parquet\"\n\nDuring handling of the above exception, another exception occurred:\n\nFileNotFoundError                         Traceback (most recent call last)\nCell In[19], line 2\n      1 data_glob = os.path.join(DATA_DIR, RAW_DATA_DIR, SOCIAL_MEDIA_TABLE, \"*.parquet\")\n----&gt; 2 sm = ibis.read_parquet(data_glob)\n      3 sm\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/expr/api.py:1551, in read_parquet(sources, table_name, **kwargs)\n   1548 from ibis.config import _default_backend\n   1550 con = _default_backend()\n-&gt; 1551 return con.read_parquet(sources, table_name=table_name, **kwargs)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:859, in Backend.read_parquet(self, source_list, table_name, **kwargs)\n    857     self._read_parquet_duckdb_native(source_list, table_name, **kwargs)\n    858 except duckdb.IOException:\n--&gt; 859     self._read_parquet_pyarrow_dataset(source_list, table_name, **kwargs)\n    861 return self.table(table_name)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:885, in Backend._read_parquet_pyarrow_dataset(self, source_list, table_name, **kwargs)\n    880 def _read_parquet_pyarrow_dataset(\n    881     self, source_list: str | Iterable[str], table_name: str, **kwargs: Any\n    882 ) -&gt; None:\n    883     import pyarrow.dataset as ds\n--&gt; 885     dataset = ds.dataset(list(map(ds.dataset, source_list)), **kwargs)\n    886     self._load_extensions([\"httpfs\"])\n    887     # We don't create a view since DuckDB special cases Arrow Datasets\n    888     # so if we also create a view we end up with both a \"lazy table\"\n    889     # and a view with the same name\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/pyarrow/dataset.py:794, in dataset(source, schema, format, filesystem, partitioning, partition_base_dir, exclude_invalid_files, ignore_prefixes)\n    783 kwargs = dict(\n    784     schema=schema,\n    785     filesystem=filesystem,\n   (...)\n    790     selector_ignore_prefixes=ignore_prefixes\n    791 )\n    793 if _is_path_like(source):\n--&gt; 794     return _filesystem_dataset(source, **kwargs)\n    795 elif isinstance(source, (tuple, list)):\n    796     if all(_is_path_like(elem) or isinstance(elem, FileInfo) for elem in source):\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/pyarrow/dataset.py:476, in _filesystem_dataset(source, schema, filesystem, partitioning, format, partition_base_dir, exclude_invalid_files, selector_ignore_prefixes)\n    474         fs, paths_or_selector = _ensure_multiple_sources(source, filesystem)\n    475 else:\n--&gt; 476     fs, paths_or_selector = _ensure_single_source(source, filesystem)\n    478 options = FileSystemFactoryOptions(\n    479     partitioning=partitioning,\n    480     partition_base_dir=partition_base_dir,\n    481     exclude_invalid_files=exclude_invalid_files,\n    482     selector_ignore_prefixes=selector_ignore_prefixes\n    483 )\n    484 factory = FileSystemDatasetFactory(fs, paths_or_selector, format, options)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/pyarrow/dataset.py:441, in _ensure_single_source(path, filesystem)\n    439     paths_or_selector = [path]\n    440 else:\n--&gt; 441     raise FileNotFoundError(path)\n    443 return filesystem, paths_or_selector\n\nFileNotFoundError: /home/runner/work/Icarus/Icarus/website/datalake/_raw/social_media/*.parquet\n\n\n\n\nsm = catalog.table(\"social_media\")\nsm\n\n\n---------------------------------------------------------------------------\nTableNotFoundError                        Traceback (most recent call last)\nCell In[20], line 1\n----&gt; 1 sm = catalog.table(\"social_media\")\n      2 sm\n\nFile ~/work/Icarus/Icarus/src/icarus/catalog.py:65, in Catalog.table(self, table_name)\n     64 def table(self, table_name):\n---&gt; 65     return read_table(table_name)\n\nFile ~/work/Icarus/Icarus/src/icarus/catalog.py:31, in read_table(table_name)\n     28 else:\n     29     table_path = delta_table_path(table_name)\n---&gt; 31 return ibis.read_delta(table_path)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/expr/api.py:1602, in read_delta(source, table_name, **kwargs)\n   1599 from ibis.config import _default_backend\n   1601 con = _default_backend()\n-&gt; 1602 return con.read_delta(source, table_name=table_name, **kwargs)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/ibis/backends/duckdb/__init__.py:971, in Backend.read_delta(self, source_table, table_name, **kwargs)\n    964 except ImportError:\n    965     raise ImportError(\n    966         \"The deltalake extra is required to use the \"\n    967         \"read_delta method. You can install it using pip:\\n\\n\"\n    968         \"pip install 'ibis-framework[deltalake]'\\n\"\n    969     )\n--&gt; 971 delta_table = DeltaTable(source_table, **kwargs)\n    973 self.con.register(table_name, delta_table.to_pyarrow_dataset())\n    974 return self.table(table_name)\n\nFile ~/work/Icarus/Icarus/.venv/lib/python3.12/site-packages/deltalake/table.py:380, in DeltaTable.__init__(self, table_uri, version, storage_options, without_files, log_buffer_size)\n    360 \"\"\"\n    361 Create the Delta Table from a path with an optional version.\n    362 Multiple StorageBackends are currently supported: AWS S3, Azure Data Lake Storage Gen2, Google Cloud Storage (GCS) and local URI.\n   (...)\n    377 \n    378 \"\"\"\n    379 self._storage_options = storage_options\n--&gt; 380 self._table = RawDeltaTable(\n    381     str(table_uri),\n    382     version=version,\n    383     storage_options=storage_options,\n    384     without_files=without_files,\n    385     log_buffer_size=log_buffer_size,\n    386 )\n\nTableNotFoundError: no log files\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "onboarding.html",
    "href": "onboarding.html",
    "title": "Onboarding",
    "section": "",
    "text": "Welcome to Icarus!\n\n\n\nDevelopmentPip\n\n\nInstall gh and just and uv, then:\ngh repo clone ibis-project/Icarus\ncd Icarus\njust setup\n. .venv/bin/activate\n\n\npip install icarus-cds\n\n\n\n\n\n\nRun:\nicarus gen\n\n\n\nRun:\nicarus run\n\n\n\nRun:\nicarus app"
  },
  {
    "objectID": "onboarding.html#setup",
    "href": "onboarding.html#setup",
    "title": "Onboarding",
    "section": "",
    "text": "DevelopmentPip\n\n\nInstall gh and just and uv, then:\ngh repo clone ibis-project/Icarus\ncd Icarus\njust setup\n. .venv/bin/activate\n\n\npip install icarus-cds"
  },
  {
    "objectID": "onboarding.html#generating-synthetic-data",
    "href": "onboarding.html#generating-synthetic-data",
    "title": "Onboarding",
    "section": "",
    "text": "Run:\nicarus gen"
  },
  {
    "objectID": "onboarding.html#running-a-project",
    "href": "onboarding.html#running-a-project",
    "title": "Onboarding",
    "section": "",
    "text": "Run:\nicarus run"
  },
  {
    "objectID": "onboarding.html#open-application",
    "href": "onboarding.html#open-application",
    "title": "Onboarding",
    "section": "",
    "text": "Run:\nicarus app"
  },
  {
    "objectID": "slides/synthetic-data/index.html#its-just-python-code",
    "href": "slides/synthetic-data/index.html#its-just-python-code",
    "title": "Icarus Synthetic Data",
    "section": "It’s just Python code",
    "text": "It’s just Python code\nIcarus Synthetic Data is just Python code, making it easy to fork and customize.\n\nimport os\nimport ibis\nimport ibis.selectors as s\n\nfrom rich import print\n\nibis.options.interactive = True"
  },
  {
    "objectID": "slides/synthetic-data/index.html#steps",
    "href": "slides/synthetic-data/index.html#steps",
    "title": "Icarus Synthetic Data",
    "section": "Steps",
    "text": "Steps\n\nSeed data\n\nmetadata: sufficient metadata to generate interesting synthetic data\n\nSynthetic data generation\n\nbatch: generate historical data for backfilling\nstreaming: generate realtime data for streaming"
  },
  {
    "objectID": "slides/synthetic-data/index.html#seed-data",
    "href": "slides/synthetic-data/index.html#seed-data",
    "title": "Icarus Synthetic Data",
    "section": "seed data",
    "text": "seed data\nStored as a Python dictionary.\n\nfrom icarus.synthetic_data.seed import data\n\nprint(data)\n\n{\n    'tickers': [\n        {\n            'ticker': 'AAI',\n            'type': 'tech',\n            'name': \"Athena's AI\",\n            'shares_total': 10000000,\n            'base_price': 100.0,\n            'trend': 'down'\n        },\n        {\n            'ticker': 'SUBS',\n            'type': 'tech',\n            'name': 'SubWay Cloud',\n            'shares_total': 100000000,\n            'base_price': 150.0,\n            'trend': 'up'\n        },\n        {\n            'ticker': 'II',\n            'type': 'tech',\n            'name': 'Icarus Investments',\n            'shares_total': 500000,\n            'base_price': 3000.0,\n            'trend': 'flat'\n        },\n        {\n            'ticker': 'IBIS',\n            'type': 'service',\n            'name': 'Interior Basics In Season',\n            'shares_total': 1000000,\n            'base_price': 1000.0,\n            'trend': 'down'\n        },\n        {\n            'ticker': 'VODA',\n            'type': 'service',\n            'name': \"Voyage's Offices, Doors, and Accessories\",\n            'shares_total': 1000000,\n            'base_price': 2500.0,\n            'trend': 'up'\n        }\n    ]\n}\n\n\n\nNote this could come from any Ibis backend. Of course, to use your own data swap out the seed and synthetic data with your own tables."
  },
  {
    "objectID": "slides/overview/index.html#icarus",
    "href": "slides/overview/index.html#icarus",
    "title": "Icarus",
    "section": "Icarus",
    "text": "Icarus\nAt Icarus, we use our expertise in Python and composable data systems to rapidly prototype and deploy data products in new verticals."
  },
  {
    "objectID": "slides/overview/index.html#composable-data-systems",
    "href": "slides/overview/index.html#composable-data-systems",
    "title": "Icarus",
    "section": "Composable data systems",
    "text": "Composable data systems\nPromising, but largely unimplemented.\n\nlayers"
  },
  {
    "objectID": "slides/overview/index.html#uis-and-engines",
    "href": "slides/overview/index.html#uis-and-engines",
    "title": "Icarus",
    "section": "UIs and engines",
    "text": "UIs and engines\nSeparate the query UI from the query engine.\n\nUI to engine"
  },
  {
    "objectID": "slides/overview/index.html#data-ai-teams",
    "href": "slides/overview/index.html#data-ai-teams",
    "title": "Icarus",
    "section": "Data & AI teams",
    "text": "Data & AI teams\nData and AI teams at Icarus consist of:\n\nData engineers: responsible for the lakehouse\nData analysts: responsible for business intelligence\nMachine learning engineers: responsible for predictive intelligence"
  },
  {
    "objectID": "slides/overview/index.html#icarus-consulting",
    "href": "slides/overview/index.html#icarus-consulting",
    "title": "Icarus",
    "section": "Icarus Consulting",
    "text": "Icarus Consulting\nIcarus Consulting offers consulting services for implementing composable data stacks."
  },
  {
    "objectID": "slides/overview/index.html#icarus-synthetic-data",
    "href": "slides/overview/index.html#icarus-synthetic-data",
    "title": "Icarus",
    "section": "Icarus Synthetic Data",
    "text": "Icarus Synthetic Data\nIcarus Synthetic Data generates realistic synthetic data."
  },
  {
    "objectID": "slides/overview/index.html#icarus-investments",
    "href": "slides/overview/index.html#icarus-investments",
    "title": "Icarus",
    "section": "Icarus Investments",
    "text": "Icarus Investments\nIcarus Investments uses historical and predictive analytics to recommend investments."
  },
  {
    "objectID": "slides.html",
    "href": "slides.html",
    "title": "Slides",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nIcarus\n\n\n \n\n\n\n\nIcarus Synthetic Data\n\n\n \n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Icarus",
    "section": "",
    "text": "Soaring beyond limits.\nTrusted by the world’s leading organizations including:\n\nContoso\nAcme Corporation\nNorthwind Traders\nAdventureWorks\nUmbrella Corporation\nInitech\nCyberdyne Systems\nStark Industries\nHooli\n\n\n\n Back to top"
  }
]